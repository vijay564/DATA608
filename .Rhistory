print("Invalid Input")
}
return(inverse)
}
#DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
#CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("CalCULATING INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
A<- matrix(c(1, -1, 2, 0, 3, 4), 2,3)
(X <-(A)%*%t(A))
(Y<- t(A)%*%(A))
# COMPUTING EIGEN VALUES AND EIGEN VECTORS OF 'X' AND 'Y' :
(E_X <- eigen(X))
(E_Y<- eigen(Y))
# COMPUTE LEFT SINGULAR, SINGULAR, RIGHT SINGULAR OF 'A' USING "SVD" FUNCTION :
(left_singular_A <- svd(A)$u)
(singular_A <- svd(A)$d)
(right_singular_A <- svd(A)$v)
# CREATING FUNCTION WITH ARGUMENT
myinverse <- function(V){
# CHECK FOR SQUARE MATRIX AND DETERMINENT NOT EQUAL TO ZERO
if(is.matrix(V) & nrow(V) == ncol(V) & det(V) != 0){
print("INVERSE OF MATRIX")
# CALCULATING DETERMINENT OF THE MATRIX
detV <- det(V)
# DEFINING NULL MATRIX
C <- matrix(0, nrow = nrow(V), ncol = ncol(V))
# USING FOR LOOP TO CALCULATE COFACTOR MATRIX
for(i in 1:nrow(V)){
for(j in 1:ncol(V)){
C[i,j] = (-1)^(i+j)*det(V[-i,-j])
}
}
# CALCULATING INVERSE BY THE FORMULAE
inverse = t(C)/detV
# IF STATEMENT FAILS IT WILL EXECUTE ELSE STATEMENT
}
else
{
print("Invalid Input")
}
}
# DEFINING MATRIX A
(A <- matrix(c(1,2,0,3,0,4,5,0,6), 3,3))
# CALLING FUNCTION BY IT'S NAME
(B<- myinverse(A))
# CHECK FOR "A×B = I"
(I<- A%*%B)
round(I)
exp(-5)
(lambda <- 10000/2000)
exp(-5)
knitr::opts_chunk$set(echo = TRUE)
library(matrixcalc)
markov <- function(u, P, n){
matrixPower <- matrix.power(P, n)
result <- u %*%matrixPower
return(result)
}
u <- c(1/3, 1/3, 1/3)
oz <- c(.5, .25, .25, .5,  0, .5, .25, .25, .5)
P <- matrix(oz, nrow = 3, ncol = 3, byrow = T)
markov(u, P, 10)
setwd("E:/github/MS/DATA608")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(googleVis)
library(shiny)
library(googleVis)
data_url <- getURL('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv')
data_url <- 'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv'
cdc <- read_csv(data_url)
data_url <- 'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv'
cdc <- read_csv('data_url')
data_url <- 'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv'
cdc <- read_csv(data_url)
library(shiny)
library(googleVis)
data_url <- 'https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv'
cdc <- read_csv(data_url)
cdc_url <- "https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv"
cdc <- read.csv(cdc_url, header= TRUE, stringsAsFactors=TRUE)
head(cdc)
summary(cdc)
cdc_url <- "https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv"
cdc <- read.csv(cdc_url, header= TRUE, stringsAsFactors=TRUE)
head(cdc)
summary(cdc)
library(sqldf)
cdc1<-sqldf("
select
icd_chapter, State, crude_rate
from
(
select
`ICD.Chapter` as icd_chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
ggplot(cdc1, aes(fill=icd_chapter, y=crude_rate, x=State)) +
labs(x="State", y="Crude Death Rate per 100,000 Persons") +
geom_bar(stat="identity") +
coord_flip()
cdc_url <- "https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv"
cdc <- read.csv(cdc_url, header= TRUE, stringsAsFactors=TRUE)
head(cdc)
summary(cdc)
library(sqldf)
cdc1<-sqldf("
select
ICD.Chapter, State, Crude.Rate
from
(
select
`ICD.Chapter` as icd_chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
library(sqldf)
cdc1<-sqldf("
select
ICD.Chapter, State, Crude.Rate
from
(
select
ICD.Chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
library(sqldf)
cdc1<-sqldf("
select
icd_chapter, State, Crude.Rate
from
(
select
ICD.Chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
library(sqldf)
cdc1<-sqldf("
select
icd_chapter, State, Crude.Rate
from
(
select
icd_cChapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
library(sqldf)
cdc1<-sqldf("
select
icd_chapter, State, Crude.Rate
from
(
select
icd_chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
data <- read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv')
head(cdc)
summary(cdc)
library(sqldf)
library(ggplot2)
library(rsconnect)
cdc1<-sqldf("
select
icd_chapter, State, crude_rate
from
(
select
`ICD.Chapter` as icd_chapter, State, Deaths,Population,power(10,5)*(Deaths/Population) as crude_rate
from cdc
where year in ('2010')
group by `ICD.Chapter`, State
) group by 1,2, 3")
ggplot(cdc1, aes(fill=icd_chapter, y=crude_rate, x=State)) +
labs(x="State", y="Crude Death Rate per 100,000 Persons") +
geom_bar(stat="identity") +
coord_flip()
cdc <- read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv')
head(cdc)
summary(cdc)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "CauseDeath", label = "Cause of Death:",
choices = levels(as.factor(cdc1$icd_chapter))
),
helpText("States by crude mortality for each cause of death."),
width = "auto"
),
plotOutput("plot1")
)
server<- function(input, output) {
output$plot1 <-renderPlot({
SelectedCause <- input$CauseDeath
ggplot(data=cdc1[cdc1$icd_chapter == SelectedCause,]
, aes(x = State, y = crude_rate)) +
labs(x="State", y="Crude Death Rate",
title = "Crude death rate per 100,000 persons",
subtitle = paste("Caused by", SelectedCause)) +
geom_bar(stat="identity", fill="steelblue") +
geom_hline(aes(yintercept = mean(crude_rate, na.rm = TRUE), linetype = "National Average"), col="red", lwd=1) +
scale_linetype(name = NULL) +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "CauseDeath", label = "Cause of Death:",
choices = levels(as.factor(cdc1$icd_chapter))
),
helpText("States by crude mortality for each cause of death."),
width = "auto"
),
plotOutput("plot1")
)
server<- function(input, output) {
output$plot1 <-renderPlot({
SelectedCause <- input$CauseDeath
ggplot(data=cdc[cdc$icd_chapter == SelectedCause,]
, aes(x = State, y = crude_rate)) +
labs(x="State", y="Crude Death Rate",
title = "Crude death rate per 100,000 persons",
subtitle = paste("Caused by", SelectedCause)) +
geom_bar(stat="identity", fill="steelblue") +
geom_hline(aes(yintercept = mean(crude_rate, na.rm = TRUE), linetype = "National Average"), col="red", lwd=1) +
scale_linetype(name = NULL) +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "CauseDeath", label = "Cause of Death:",
choices = levels(as.factor(cdc$icd_chapter))
),
helpText("States by crude mortality for each cause of death."),
width = "auto"
),
plotOutput("plot1")
)
server<- function(input, output) {
output$plot1 <-renderPlot({
SelectedCause <- input$CauseDeath
ggplot(data=cdc[cdc$icd_chapter == SelectedCause,]
, aes(x = State, y = crude.Rate)) +
labs(x="State", y="Crude Death Rate",
title = "Crude death rate per 100,000 persons",
subtitle = paste("Caused by", SelectedCause)) +
geom_bar(stat="identity", fill="steelblue") +
geom_hline(aes(yintercept = mean(Crude.Rate, na.rm = TRUE), linetype = "National Average"), col="red", lwd=1) +
scale_linetype(name = NULL) +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "CauseDeath", label = "Cause of Death:",
choices = levels(as.factor(cdc$icd_chapter))
),
helpText("States by crude mortality for each cause of death."),
width = "auto"
),
plotOutput("plot1")
)
server<- function(input, output) {
output$plot1 <-renderPlot({
SelectedCause <- input$CauseDeath
ggplot(data=cdc[cdc$icd_chapter == SelectedCause,]
, aes(x = State, y = Crude.Rate)) +
labs(x="State", y="Crude Death Rate",
title = "Crude death rate per 100,000 persons",
subtitle = paste("Caused by", SelectedCause)) +
geom_bar(stat="identity", fill="steelblue") +
geom_hline(aes(yintercept = mean(Crude.Rate, na.rm = TRUE), linetype = "National Average"), col="red", lwd=1) +
scale_linetype(name = NULL) +
theme_bw()
})
}
shinyApp(ui = ui, server = server)
#subsetting the data
mental_data_2010 <- filter(mortality_data, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
#subsetting the data
mental_data_2010 <- filter(cdc, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
cdc <- read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv')
head(cdc)
summary(cdc)
#subsetting the data
mental_data_2010 <- filter(cdc, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
library(shiny)
library(tidyverse)
library(plotly)
library(rsconnect)
library(RCurl)
Sys.setenv("plotly_username"='********************')
Sys.setenv("plotly_api_key"='***********************')
rsconnect::setAccountInfo(name='*********************',
token='***********************',
secret='**********************')
#subsetting the data
mental_data_2010 <- filter(cdc, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
mental_data_2010 <-  mental_data_2010 %>% arrange(Crude.Rate)
#head(mental_data_2010)
#subsetting the data
mental_data_2010 <- filter(cdc, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
mental_data_2010 <-  mental_data_2010 %>% arrange(Crude.Rate)
#head(mental_data_2010)
#tested the plot by publsihing to my plotly page
p <- plot_ly(x = mental_data_2010$Crude.Rate, y = mental_data_2010$State, type = 'bar', text = mental_data_2010$Crude.Rate, textposition = 'auto',  color = I("grey"), orientation = 'h')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
#chart_link = api_create(p, filename="horizontalbar-Mental_Health_Mortality")
#chart_link
#subsetting the data
mental_data_2010 <- filter(cdc, Year == 2010 & ICD.Chapter == 'Mental and behavioural disorders')
mental_data_2010 <-  mental_data_2010 %>% arrange(Crude.Rate)
head(mental_data_2010)
#tested the plot by publsihing to my plotly page
p <- plot_ly(x = mental_data_2010$Crude.Rate, y = mental_data_2010$State, type = 'bar', text = mental_data_2010$Crude.Rate, textposition = 'auto',  color = I("grey"), orientation = 'h')
#tested the plot by publsihing to my plotly page
p <- plot_ly(x = mental_data_2010$Crude.Rate, y = mental_data_2010$State, type = 'bar', text = mental_data_2010$Crude.Rate, textposition = 'auto',  color = I("grey"), orientation = 'h')
p
#tested the plot by publsihing to my plotly page
p <- plot_ly(x = mental_data_2010$Crude.Rate, y = mental_data_2010$State, type = 'bar', text = mental_data_2010$Crude.Rate, textposition = 'auto',  color = I("blue"), orientation = 'h')
p
#Adapted from https://plot.ly/r/shiny-tutorial/
ui <-# Use a fluid Bootstrap layout
fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#Adapted from https://plot.ly/r/shiny-tutorial/
ui <-# Use a fluid Bootstrap layout
fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui = ui,server = server
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui = ui,server = server)
#Adapted from https://plot.ly/r/shiny-tutorial/
ui <-# Use a fluid Bootstrap layout
fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#tested the plot by publsihing to my plotly page
p <- plot_ly(x = mental_data_2010$Crude.Rate, y = mental_data_2010$State, type = 'bar', text = mental_data_2010$Crude.Rate, textposition = 'auto',  color = I("blue"), orientation = 'h')
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#Adapted from https://plot.ly/r/shiny-tutorial/
ui <-# Use a fluid Bootstrap layout
fluidPage(
plotlyOutput("p"),
verbatimTextOutput("event")
)
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#Adapted from https://plot.ly/r/shiny-tutorial/
ui <-# Use a fluid Bootstrap layout
fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui, server, options = list(height = 540, width = 960))
#Adapted from https://plot.ly/r/shiny-tutorial/
server <- function(input, output) {
output$plot <- renderPlotly({
p #used the above plotly object instead of redoing here
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a bar to see State Data!" else d
})
}
shinyApp(ui = ui, server = server, options = list(height = 540, width = 960))
